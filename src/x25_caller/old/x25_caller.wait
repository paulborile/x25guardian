/*
 * $Id: x25_caller.wait,v 1.1.1.1 1998/11/18 15:03:32 paul Exp $
 * 
 * Project : PX25 - Router per Autorizzazioni POS
 *
 * Module: x25_caller
 *
 * Contents: 
 *
 * Author(s): C.U. S.r.l - P.Borile, G. Priveato
 *
 * $Log: x25_caller.wait,v $
 * Revision 1.1.1.1  1998/11/18 15:03:32  paul
 * Guardian : x25 Pos router
 *
 *
 */

static char rcsid[] = "$Id: x25_caller.wait,v 1.1.1.1 1998/11/18 15:03:32 paul Exp $";

/*  System include files                        */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <ctype.h>
#include <signal.h>
#include "sys/types.h"

#include	<eicon/x25.h>
#include <eicon/neterr.h>

/*  Project include files                       */
#include		"px25_globals.h"
#include		"x25_caller.h"

/*  Module include files                        */
#include "debug.h"
#include "errlog.h"

/*  Extern functions used                       */

/*  Extern data used                            */

/*  Local constants                             */

#define  OPTS     	"d:s:"

#ifdef   DEBUG
#define  X25_OUTCALL  "x25_outcall.d"
#else
#define  X25_OUTCALL  "x25_outcall"
#endif

/*  Local functions used								*/

void  	terminate();
void		set_signals();
void     get_command_line();
void     x25_caller_usage();
void		myexit();

/*  Local types                                 */

/*  Local macros                                */

/*  Local data                                  */

static 	char pid_str[20];
static 	int debuglevel;
static 	char debug_file[BUFSIZ];
static   struct   sigaction   act;

char 	   remote[X25_ADDRLEN+X25_ADDREXT+2];  /* Remote DTE address */
char 	   remote2[X25_ADDRLEN+X25_ADDREXT+2]; /* Remote DTE address */
char 	   local[X25_ADDRLEN+X25_ADDREXT+2];   /* Local DTE address */

struct	x25doneinfo	x25doneinfo;
struct	x25data facility;               /* Call/Listen facility */
struct	x25data* udata_p;
int     	info;                              /* Call/Listen info parameter */
int     	port;                              /* Call/Listen port parameter */
int     	cid;                               /* Connection identifier */
int		lsn;

int   	sd;            /* socket descriptor on command line */
int 		RC = -1;          /* Set if read X25_ASY_DATA_PACKET from asy */

char		socketbuffer[BUFSIZ];
char		pname[BUFSIZ];
char     cmd[16];
char     cmdport[16];
char     cmdlsn[16];
char     cmddebug[16];

char msg[ENETMSGLEN];                  /* x25 string. */
char message[ENETMSGLEN];

main(argc,argv)
int argc;
char* argv[];
{
	struct	PKT_HDR	*p = (struct PKT_HDR *) (socketbuffer);
	struct	X25_INFO *i = (struct X25_INFO *)
									(socketbuffer + sizeof(struct PKT_HDR));
	char		*packet		= (socketbuffer + sizeof(struct PKT_HDR));

	pid_t		child;
	int	rc;
	
	get_command_line(argc, argv);

#ifdef DEBUG
	sprintf(pid_str, "%d", getpid());
   sprintf(debug_file, "/tmp/x25_caller%05d.debug", getpid());
   initdebug(debuglevel, debug_file, argv[0], pid_str);
#endif

	/*
	 * set signals
	 */

	set_signals();

	/*
	 * Globalize program name
	 */

	strcpy(pname, argv[0]);


	/* Initialize the X.25 library. */

	if (x25init(0) < 0) {
		x25errormsg(msg);
		errlog(X25_LOG,"%s : x25init error %d, %s\n", 
						pname, x25error(), msg);
#ifdef   DEBUG
	enddebug();
#endif
		exit(1);
	}

	x25version(msg);                             /* Get the toolkit version. */
	debug((1,"%s", msg));

	/* While 	x25_read()	*/
	
	while (( rc = mos_recv(sd, socketbuffer, sizeof (struct PKT_HDR))) != 0 )
	{	
		switch ( p->pkt_code )
		{
			case	X25_CALL_REQ		:

				debug((3,"mos_recv() received X25_CALL_REQ with rc = %d\n", rc));

				if ( x25_outcall(socketbuffer) )
				{
					/* getconn now for later execl */

					if (( x25getconn(cid, &port, &lsn)) < 0 )
					{
						x25errormsg(msg);
						errlog(X25_LOG,"%s - x25getconn error %d, %s\n",
													pname, x25error(), msg);
						debug((1,"main() - x25getconn error %d %s\n",x25error(),msg));

						/* Send a REJECT packet */
						
						p->pkt_code = X25_CALL_REJECT;

						if (( RC = mos_send(sd, socketbuffer, sizeof(struct PKT_HDR))) < 0)
						{
							/* unable to write on socket, close and exit */

							debug((1,"CALL REJECT - mos_send rc = %d errno %d\n",
													RC,errno));
							errlog(INT_LOG,
							"%s : unable to mos_send CALL REJECT on socket,errno %d\n",
									pname, errno);
							myexit(1);
						}
						debug((1,"mos_send() - X25_CALL_REJECT with rc = %d\n", RC));
						myexit(1);
					}
					debug((3,"x25getconn() cid = %d port = %d lsn %d\n", 
													cid, port, lsn));

					/*	Send an ACCEPT packet */

					p->pkt_code = X25_CALL_ACCEPT;

					if (( RC = mos_send(sd, socketbuffer, sizeof(struct PKT_HDR))) < 0)
			      {
         			/* unable to write on socket, close and exit */

			         debug((1,"CALL_ACCEPT - mos_send() rc = %d errno %d\n", 
														RC, errno));

     				   errlog(INT_LOG,
						"%s : unable to mos_send CALL ACCEPT on socket, errno %d\n",
                                          pname, errno);
        			 	myexit(1);
     			 	}
					debug((1,"mos_send() - X25_CALL_ACCEPT with rc = %d\n", RC));

					/* exec new process to manage call  */

					sprintf(cmd, "-s%d", sd);
					sprintf(cmdport, "-p%d", port);
					sprintf(cmdlsn, "-l%d", lsn);
					sprintf(cmddebug, "-d%d", debuglevel);

					debug((3,
					"executing %s socket %s port %s lsn %s debug%s\n",
										 X25_OUTCALL, cmd, cmdport, cmdlsn , cmddebug));

#ifdef   DEBUG
			  execlp(X25_OUTCALL, X25_OUTCALL, cmd, cmdport, cmdlsn, cmddebug, 0);
#else
			  execlp(X25_OUTCALL, X25_OUTCALL, cmd, cmdport, cmdlsn, 0);
#endif

				  /* if reached means that execlp failed */

				  	debug((1, "main() execlp failed errno %d\n", errno));
				  	errlog(INT_LOG, "%s : Unable to execlp %s , errno %d\n", 
										pname, X25_OUTCALL, errno);
				 	myexit(1);
				}
				else
				{
					/* Cannot xcalling */
	
					x25errormsg(msg);
					errlog(X25_LOG,"%s : x25outcall() error %d, %s\n", 
						pname, x25error(), msg);

					/* Send a REJECT packet */
  
               p->pkt_code = X25_CALL_REJECT;

               if (( RC = mos_send(sd, socketbuffer, sizeof(struct PKT_HDR))) < 0)
               {
               	/* unable to write on socket, close and exit */

                  debug((1," NO CALL REJECT - mos_send rc = %d errno %d\n",
                                       RC,errno));
                  errlog(INT_LOG,
                  "%s : unable to mos_send CALL REJECT on socket,errno %d\n",
                           pname, errno);
                  myexit(1);
               }
               debug((1,"mos_send() - X25_CALL_REJECT with rc = %d\n", RC));
					close (sd);
               exit(1);
				}
				break;

			default						:

				debug((1, "main() - No X25_CALL_REQ packet received\n"));
				errlog(INT_LOG, "%s : NO X25_CALL_REQ PKT RECEIVED\n", pname);
				myexit(1);
				break;
		}
	} /* mos_recv returned 0 = input socket closed */

	if ( rc == 0 )
	{
		debug((3,"mos_recv returned 0 = input socket closed\n"));

		/* close all connections	*/
		/* exit	*/
		close(sd);
		exit(1);
	}
}


/*
 *
 * Procedure: x25_outcall()
 *
 * Parameters: socket buffer
 *
 * Description: generate outgoing call with info coming from
 *					x25_listener
 *
 * Return: TRUE|FALSE
 *
 */

int	x25_outcall(buf)
char	*buf;
{
	struct	X25_INFO	*i = (struct X25_INFO *) (buf + sizeof(struct PKT_HDR));

	char causemsg[ENETMSGLEN];
	char msg[ENETMSGLEN];                 
	char message[ENETMSGLEN];

   debug((3,"x25_outcall() - mos_receiving X25_INFO structure ....\n"));

	/* Initialize the remote and local addresses */

	debug((3,"remote %s\n", i->NUA_X25.primary_nua));

	strcpy(remote, i->NUA_X25.primary_nua);
	strcpy(remote2, i->NUA_X25.secondary_nua);

#ifdef TEST
	strcpy(local, "7000");
#else
	strcpy(local, i->source_nua);
#endif

	port = i->port;
	
	debug((3,"port %d\n", i->port));

	/* Choose user data */

	if ( i->userdata.xd_len > 0 )
	{
		debug((3,"user data > 0\n"));
		udata_p = &(i->userdata);
	}
	else
	{
		debug((3,"user data = NULL\n"));
		udata_p = NULL;
	}

	/* facilities  */
	strcpy(facility.xd_data, i->facility.xd_data);
	facility.xd_len = i->facility.xd_len;

	/* info  */
	info = 0;

	/* Establish the X.25 connection in WAIT mode. */

	debug((3,"doing x25xcall() to remote %s from %s port %d\n",
				remote, local, port));

	if (x25xcall(&cid, X25WAIT, port, info, &facility, udata_p,
						remote, local, X25NULLFN) < 0) 
	{
		x25causemsg(causemsg);
		x25diagmsg(message);
		x25errormsg(msg);
		debug((1,
		"x25xcall() to remote %s from local %s failed with error %d, %s\ncause: %s, diag: %s; trying on secondary nua\n",
								remote, local, x25error(), msg, causemsg ,message));

		/* try on secondary nua */

		if (x25xcall(&cid, X25WAIT, port, info, &facility, udata_p,
						remote2, local, X25NULLFN) < 0) 
		{
			x25causemsg(causemsg);
			x25diagmsg(message);
			x25errormsg(msg);
			debug((1,"x25xcall() on secondary nua failed with error %d %s, cause: %s, diag: %s\n", 
										x25error(), msg ,causemsg, message));
			return(0);
		}
		debug((3,"x25xcall() on secondary nua OK cid = %d\n", cid));
	}
	else
	{
		debug((3,"x25xcall() on primary nua OK cid = %d\n", cid));
	}
	
	return(1);
}

/*
 *
 *  Procedure: get_command_line
 *
 *  Parameters: argc, argv
 *
 *  Description: parse command line
 *
 *  Return: none
 *
 */

void  get_command_line(argc, argv)
int   argc;
char  **argv;
{
	int   fatal = 0;
	int   c;
	extern char *optarg;

   while ((c = getopt(argc, argv, OPTS)) !=EOF)
	{
		switch(c)
		{
			case  'd'   :
				debuglevel  =   atoi(optarg);
				break;

			case  's'   :
				sd   =  atoi(optarg);
				break;

			default:
				printf("%s : invalid flag.\n", argv[0]);
				x25_caller_usage(argc, argv);
				exit(FAILURE);
		}
	}

#ifdef DEBUG
	if ( debuglevel == -1 ) fatal++;
#endif

	if ( sd == -1 ) fatal++;

   if ( fatal )
	{
		x25_caller_usage(argc, argv);
		exit(FAILURE);
	}
}

/*
 *
 *  Procedure: x25_caller_usage
 *
 *  Parameters: argc, argv
 *
 *  Description: obvious ?
 *
 *  Return: ah!
 *
 */

void  x25_caller_usage(argc, argv)
int   argc;
char  **argv;
{
#ifdef   DEBUG
   printf("Usage: %s -d<debuglevel> -s<socket>\n",argv[0]);
#else
   printf("Usage: %s -s<socket>\n",argv[0]);
#endif
}

/*
 *
 *  Procedure: myexit
 *
 *  Parameters: exit code
 *
 *  Description: close sd , hangup and exit
 *
 *  Return:
 *
 */

void  myexit(code)
int   code;
{
	debug((3, "myexit() - starting code = %d\n", code));

	if ( sd != -1 )
   {
      close(sd);
   }

	if (x25hangup(cid, NULL , XH_IMM, X25NULLFN) < 0)
   {
      x25errormsg(msg);
      errlog(X25_LOG,"%s - x25hangup error %d, %s\n",
                              pname, x25error(), msg);

      debug((1, "myexit() - x25hangup failed %d, %s\n",
                                 x25error(), msg));
   }
	else
		debug((3, "myexit() - x25hangup(%d) ok\n", cid));
	

#ifdef   DEBUG
   enddebug();
#endif

   exit(code);
}

/*
 *
 *  Procedure: set_signals
 *
 *  Parameters: none
 *
 *  Description: set initial signals using sigaction
 *
 *  Return:  none
 *
 */

void	set_signals()
{
	debug((3, "set_signals() - setting signals\n"));

	act.sa_flags		= SA_RESTART;
	sigemptyset(&act.sa_mask);

	act.sa_handler		= terminate;

	sigaction(SIGTERM, &act, NULL);
	sigaction(SIGINT, &act, NULL);
	sigaction(SIGQUIT, &act, NULL);

	debug((3, "set_signals() - done\n"));
}

/*
 *
 *  Procedure: terminate
 *
 *  Parameters: none
 *
 *  Description: call myexit() 
 *
 *  Return:
 *
 */

void  terminate(sig)
int   sig;
{
	debug((3, "terminate() - terminating on sig  %d\n", sig));
	myexit(SUCCESS);
}

/*
 * $Id: x25_incall_rec.prova,v 1.1.1.1 1998/11/18 15:03:30 paul Exp $
 * 
 * Project : PX25 - Router per Autorizzazioni POS
 *
 * Module:  x25_incall
 *
 * Contents: 
 *
 * Author(s): C.U. S.r.l - P.Borile, G. Priveato
 *
 * $Log: x25_incall_rec.prova,v $
 * Revision 1.1.1.1  1998/11/18 15:03:30  paul
 * Guardian : x25 Pos router
 *
 *
 */

static char rcsid[] = "$Id: x25_incall_rec.prova,v 1.1.1.1 1998/11/18 15:03:30 paul Exp $";

/*  System include files                        */

#include <stdio.h>
#include <signal.h>
#include <eicon/x25.h>
#include <eicon/neterr.h>

/*  Project include files                       */
#include    "px25_globals.h"

/*  Module include files                        */
#include "debug.h"
#include "errlog.h"

/*  Extern functions used                       */

/*  Extern data used                            */

extern	int	info;
extern	int	port;
extern	int	lsn;
extern	int	sd;

/*  Local constants                             */

/*  Local types                                 */

/*  Local macros                                */

/*  Local data                                  */

int	cid1;
int	xerr;
char  buf[BUFSIZ];
char	*outbuf;
char 	msg[ENETMSGLEN];                  /* x25 string. */

/*
 *
 * Procedure: x25_receiver
 *
 * Parameters: 
 *
 * Description:
 *
 * Return: 0 if success, -1 otherwise
 *
 */

int	x25incall_rec()
{
	struct	PKT_HDR	*h = ( struct PKT_HDR * ) buf;
	int		x25_pktlen;
	int		rc;
	int		xrc;

	if (( rc = x25mkconn(&cid1, port, lsn,  X25WAIT)) < 0 )
	{
		xerr = x25error();
		x25errormsg(msg);
		errlog(X25_LOG,"x25incall_rec - x25mkconn() error %d, %s\n", 
						xerr, msg);
		debug((1,"x25incall_rec - x25mkconn() error %d, %s\n", xerr, msg));
		return(-1);
	}
	debug((3,"x25incall_rec - x25mkconn OK with cid %d, port %d, lsn %d\n", 
						cid1, port, lsn));

	if ((outbuf=x25alloc(BUFSIZ)) == NULL) {
		xerr = x25error();
		x25errormsg(msg);
		errlog(X25_LOG,"x25incall_rec : x25alloc() error %d, %s\n",
									xerr, msg);
		debug((1,"x25incall_rec - x25alloc() error %d, %s\n", xerr, msg));
		return(-1);
	}

	while (( rc = mos_recv(sd, buf, BUFSIZ)) > 0 )
	{
		debug((3,"x25incall_rec : mos_recv OK, read %d\n", rc));

		if(h->flags == ASY_MORE_BIT)
		{
			info = XI_MBIT;
			debug((3,"x25_incall_rec : MORE BIT received\n"));
		}

		memcpy(outbuf, buf + sizeof(struct PKT_HDR), 
										rc - sizeof(struct PKT_HDR));

		debug((3, "x25incall_rec : x25sending %d bytes\n",
										rc - sizeof(struct PKT_HDR)));
		if (( xrc = x25send(cid1, outbuf, 
			rc - sizeof(struct PKT_HDR), info, X25NULLFN)) < 0 ) 
		{
			xerr = x25error();
			x25errormsg(msg);
			errlog(X25_LOG,"x25incall_rec : x25send() error %d, %s\n",
									xerr, msg);
			debug((1,"x25incall_rec - x25send() error %d, %s\n", xerr, msg));
			return(-1);
		}
		debug((3,"x25incall_rec : x25send() OK rc = %d\n", xrc));
	}


	/* mos_recv has returned < 0 */
	/* LINK DOWN ? */

	if (x25hangup(cid1, NULL , XH_IMM, X25NULLFN) < 0)
	{
		x25errormsg(msg);
		errlog(X25_LOG,"x25incall_rec - x25hangup() error %d, %s\n",
						x25error(), msg);
	}

	errlog(X25_LOG,"x25incall_rec - mos_recv error\n");

	/* end connection	*/
	close(sd);
	return(-1);
}
